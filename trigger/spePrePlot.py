import matplotlib.pyplot as plt
import h5py, argparse
import numpy as np
from matplotlib import cm
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from matplotlib.ticker import MultipleLocator, FormatStrFormatter
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.colors as colors
psr = argparse.ArgumentParser()
psr.add_argument('-i', dest='ipt', help='input h5 file')
psr.add_argument('-o', dest='opt', help='output png file')
psr.add_argument('-c', dest='channel', nargs='+', default=[0,1],help='channel used in DAQ')
psr.add_argument('-t', dest='trigger', default=0, type=int, help='trigger channel')

args = psr.parse_args()
# plt.style.use('fivethirtyeight')
info = []
with h5py.File(args.ipt, 'r') as ipt:
    waveformLength = ipt.attrs['waveformLength']
    #waveformLength = 1500
    for j in range(len(args.channel)):
        info.append(ipt['ch{}'.format(args.channel[j])][:])
    triggerInfo = ipt['trigger'][:]
rangemin =-100
rangemax = 500
bins = rangemax-rangemin

# set the figure appearance
props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
jet = plt.cm.jet
newcolors = jet(np.linspace(0, 1, 32768))
white = np.array([1, 1, 1, 0.5])
newcolors[0, :] = white
cmap = ListedColormap(newcolors)
pdf = PdfPages(args.opt)
# plot the trigger info
fig, ax = plt.subplots()
ax.set_title('triggertime distribution')
ax.hist(triggerInfo['triggerTime'],histtype='step', bins=500, range=[150,200], label='trigger time')
ax.set_xlabel('time/ns')
ax.set_ylabel('entries')
ax.legend()
ax.set_yscale('log')
plt.tight_layout()
# plt.savefig('{}/{}triggertime.png'.format(args.opt,args.trigger))
pdf.savefig(fig)

ax.set_yscale('linear')
# plt.savefig('{}/{}triggerLinear.png'.format(args.opt,args.trigger))
pdf.savefig(fig)
plt.close()

for j in range(len(args.channel)):
    
    xminorLocator = MultipleLocator(5)
    fig, ax = plt.subplots()
    ax.set_title('charge distribution')
    rangemin = int(np.min(info[j]['allCharge'])-1)
    rangemax = int(np.max(info[j]['allCharge'])+1)
    bins = rangemax-rangemin
    ax.hist(info[j]['allCharge'],histtype='step', bins=bins, range=[rangemin, rangemax], label='all charge integrate')
    h=ax.hist(info[j]['minPeakCharge'],histtype='step', bins=bins, range=[rangemin, rangemax], label='peak charge integrate')
    hmax=np.max(h[0][10:200])
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    ax.legend()
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}charge.png'.format(args.opt,args.channel[j]))
    #print(hmax)
    ax.set_yscale('linear')
    ax.set_ylim([0,8000])
    ax.set_xlim([5, 200])
    
    pdf.savefig(fig)
    # plt.savefig('{}/{}chargeLinear.png'.format(args.opt,args.channel[j]))
    plt.close()

    fig, ax = plt.subplots()
    ax.set_title('charge distribution peak>{}'.format(5))
    ax.hist(info[j]['minPeakCharge'],histtype='step', bins=192, range=[8, 200], label='peak charge integrate')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeak']>5)],histtype='step', bins=192, range=[8, 200], label='peak charge integrate peak>5')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeak']<=5)],histtype='step', bins=192, range=[8, 200], label='peak charge integrate peak<=5')
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}chargeLinearCutPeak{}.png'.format(args.opt,args.channel[j], 5))
    plt.close()
    fig, ax = plt.subplots()
    ax.set_title('charge distribution peak>{}'.format(7))
    ax.hist(info[j]['minPeakCharge'],histtype='step', bins=192, range=[8, 200], label='peak charge integrate')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeak']>7)],histtype='step', bins=192, range=[8, 200], label='peak charge integrate peak>7')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeak']<=7)],histtype='step', bins=192, range=[8, 200], label='peak charge integrate peak<=7')
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}chargeLinearCutPeak{}.png'.format(args.opt,args.channel[j], 7))
    plt.close()
    
    fig, ax = plt.subplots()
    ax.set_title('charge distribution')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeak']>5)&(info[j]['minPeakPos']>240)&(info[j]['minPeakPos']<260)],histtype='step', bins=195, range=[5, 200], label='peak charge integrate')
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    pdf.savefig(fig)
    # plt.savefig('{}/{}chargeLinearCutPeakPos.png'.format(args.opt,args.channel[j]))
    plt.close()
    fig, ax = plt.subplots()
    ax.set_title('charge distribution')
    ax.hist(info[j]['minPeakCharge'][(info[j]['minPeakPos']>240)&(info[j]['minPeakPos']<260)],histtype='step', bins=195, range=[5, 200], label='peak charge integrate')
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    pdf.savefig(fig)
    # plt.savefig('{}/{}chargeLinearCutPos.png'.format(args.opt,args.channel[j]))
    plt.close()

    fig, ax = plt.subplots()
    ax.set_title('peak height distribution')
    h = ax.hist(info[j]['minPeak'],histtype='step', bins=1000, label='baseline - peak')
    print('peak height max:{};max index {}; part of peak {}'.format(np.max(h[0]), np.argmax(h[0]), h[0][:(np.argmax(h[0])+5)]))
    ax.set_xlabel('peak height/mV')
    ax.set_ylabel('entries')
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakLinear.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeak.png'.format(args.opt,args.channel[j]))
    fig, ax = plt.subplots()
    ax.set_title('peak height distribution range:{}'.format([0,50]))
    h = ax.hist(info[j]['minPeak'],histtype='step', bins=50, range=[0,50], label='baseline - peak')
    print('peak height max:{};max index {}; part of peak {}'.format(np.max(h[0]), np.argmax(h[0]), h[0][:(np.argmax(h[0])+5)]))
    ax.set_xlabel('peak height/mV')
    ax.set_ylabel('entries')
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakCutLinear.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakCut.png'.format(args.opt,args.channel[j]))
    
    # min peak position
    xminorLocator = MultipleLocator(10)
    fig, ax = plt.subplots()
    ax.set_title('peak position distribution')
    h = ax.hist(info[j]['minPeakPos'],histtype='step', bins=waveformLength, range=[0,waveformLength], label='the largest peak pos')
    print('h shape:{};max index {}'.format(h[0].shape,np.argmax(h[0])))
    ax.set_xlabel('peak position/ns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakposLinear.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakpos.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('peak position distribution')
    h = ax.hist(info[j]['minPeakPos'][(info[j]['minPeak']>5)],histtype='step', bins=waveformLength, range=[0,waveformLength], label='the largest peak pos')
    print('h shape:{};max index {}'.format(h[0].shape,np.argmax(h[0])))
    ax.set_xlabel('peak position/ns')
    ax.set_ylabel('entries')
    ax.xaxis.set_minor_locator(xminorLocator)
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakposCutLinear.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}minpeakposCut.png'.format(args.opt,args.channel[j]))
    
    # min peak position and peak height distribution
    fig, ax = plt.subplots()
    ax.set_title('peakPos-peakHeight')
    h = ax.hist2d(info[j]['minPeakPos'],info[j]['minPeak'],range=[[0,waveformLength],[0,50]], bins=[int(waveformLength/100), 100], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakPos/ns')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakPos-peakHeight.png'.format(args.opt,args.channel[j]))
    # min peak charge and peak height distribution
    fig, ax = plt.subplots()
    ax.set_title('peakCharge-peakHeight')
    h = ax.hist2d(info[j]['minPeakCharge'],info[j]['minPeak'],range=[[0,400],[0,50]], bins=[400, 50], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakCharge/nsmV')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakCharge-peakHeight.png'.format(args.opt,args.channel[j]))

    fig, ax = plt.subplots()
    ax.set_title('peakCharge-peakHeight')
    h = ax.hist2d(info[j]['minPeakCharge'],info[j]['minPeak'],range=[[0,4500],[0,1000]], bins=[450, 100],norm=colors.LogNorm(), cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakCharge/nsmV')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakCharge-peakHeightLog.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('peakCharge-peakHeight')
    h = ax.hist2d(info[j]['minPeakCharge'],info[j]['minPeak'],range=[[35,4000],[3,998]], bins=[793, 199], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakCharge/nsmV')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakCharge-peakHeightCut1.png'.format(args.opt,args.channel[j]))

    fig, ax = plt.subplots()
    ax.set_title('peakCharge-peakHeight')
    h = ax.hist2d(info[j]['minPeakCharge'],info[j]['minPeak'],range=[[35,1000],[3,75]], bins=[965, 72], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakCharge/nsmV')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakCharge-peakHeightCut.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('peakCharge-peakHeight')
    h = ax.hist2d(info[j]['minPeakCharge'],info[j]['minPeak'],range=[[5,200],[3,23]], bins=[195, 20], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('peakCharge/nsmV')
    ax.set_ylabel('peakHeight/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}peakCharge-peakHeightZoomIn.png'.format(args.opt,args.channel[j]))

    # baseline and std distribution
    fig, ax = plt.subplots()
    ax.set_title('baseline-std')
    h = ax.hist2d(info[j]['baseline'],info[j]['std'], bins=[100,100], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('baseline/mV')
    ax.set_ylabel('std/mV')
    pdf.savefig(fig)
    # plt.savefig('{}/{}base-std.png'.format(args.opt,args.channel[j]))
    # baseline
    fig, ax = plt.subplots()
    ax.set_title('baseline')
    ax.hist(info[j]['baseline'],histtype='step',bins=100, label='baseline')
    ax.set_xlabel('baseline/mV')
    ax.set_ylabel('entries')
    ax.set_yscale('log')
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}baselineLinear.png'.format(args.opt,args.channel[j]))
    # std
    fig, ax = plt.subplots()
    ax.set_title('std distribution')
    ax.hist(info[j]['std'],histtype='step', bins=100, label='std')
    ax.set_xlabel('std/mV')
    ax.set_ylabel('entries')
    ax.legend()
    pdf.savefig(fig)
    # plt.savefig('{}/{}stdLinear.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}stdlog.png'.format(args.opt,args.channel[j]))
    plt.close()
    
    # risetime and downtime
    fig, ax = plt.subplots()
    ax.set_title('rise time distribution')
    ax.hist(info[j]['riseTime'][info[j]['minPeak']>5],histtype='step',bins=40, range=[0,40], label='risingtime')
    ax.set_xlabel('riseTime/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}risetime.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}risetimeLog.png'.format(args.opt,args.channel[j]))
    plt.close()
    fig, ax = plt.subplots()
    ax.set_title('rise time distribution')
    ax.hist(info[j]['riseTime'][(info[j]['minPeak']>5)&(info[j]['minPeak']<40)],histtype='step',bins=40, range=[0,40], label='risingtime')
    ax.set_xlabel('riseTime/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}risetimeUlimit.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}risetimeUlimitLog.png'.format(args.opt,args.channel[j]))
    plt.close()

    fig, ax = plt.subplots()
    ax.set_title('down time distribution')
    ax.hist(info[j]['downTime'][info[j]['minPeak']>5],histtype='step',bins=40, range=[0,40], label='downtime')
    ax.set_xlabel('downTime/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}downTime.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}downtimeLog.png'.format(args.opt,args.channel[j]))
    fig, ax = plt.subplots()
    ax.set_title('down time distribution')
    ax.hist(info[j]['downTime'][(info[j]['minPeak']>5)&(info[j]['minPeak']<40)],histtype='step',bins=40, range=[0,40], label='downtime')
    ax.set_xlabel('downTime/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}downTimeUlimit.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}downtimeUlimitLog.png'.format(args.opt,args.channel[j]))

    fig, ax = plt.subplots()
    ax.set_title('FWHM distribution')
    ax.hist(info[j]['FWHM'][info[j]['minPeak']>5],histtype='step',bins=40, range=[0,40], label='FWHM')
    ax.set_xlabel('FWHM/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHM.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHMLog.png'.format(args.opt,args.channel[j]))
    fig, ax = plt.subplots()
    ax.set_title('FWHM distribution')
    ax.hist(info[j]['FWHM'][(info[j]['minPeak']>5)&(info[j]['minPeak']<40)],histtype='step',bins=40, range=[0,40], label='FWHM')
    ax.set_xlabel('FWHM/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHMUlimit.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHMUlimitLog.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('FWHM-charge')
    h = ax.hist2d(info[j]['minPeakCharge'][(info[j]['minPeak']>5)],info[j]['FWHM'][(info[j]['minPeak']>5)], bins=[1000,20], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('FWHM/ns')
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHM-charge.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('FWHM-charge')
    h = ax.hist2d(info[j]['minPeakCharge'][(info[j]['minPeak']>5)&(info[j]['minPeakCharge']<8000)],info[j]['FWHM'][(info[j]['minPeak']>5)&(info[j]['minPeakCharge']<8000)], bins=[1000,20], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('FWHM/ns')
    pdf.savefig(fig)
    # plt.savefig('{}/{}FWHM-chargeCut.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('tot distribution')
    ax.hist(info[j][info[j]['minPeak']>5]['end5mV']-info[j][info[j]['minPeak']>5]['begin5mV'],histtype='step',bins=40, range=[0,40], label='tot')
    ax.set_xlabel('tot/ns')
    ax.set_ylabel('entries')
    ax.legend()
    #ax.set_xlim([1,40])
    pdf.savefig(fig)
    # plt.savefig('{}/{}tot.png'.format(args.opt,args.channel[j]))
    ax.set_yscale('log')
    pdf.savefig(fig)
    # plt.savefig('{}/{}totLog.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('charge-tot')
    h = ax.hist2d(info[j]['minPeakCharge'][(info[j]['minPeak']>5)],info[j][(info[j]['minPeak']>5)]['end5mV']-info[j][info[j]['minPeak']>5]['begin5mV'], bins=[1000,30], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('tot/ns')
    pdf.savefig(fig)
    # plt.savefig('{}/{}tot-charge.png'.format(args.opt,args.channel[j]))
    
    fig, ax = plt.subplots()
    ax.set_title('charge-tot charge<{}'.format(1000))
    h = ax.hist2d(info[j]['minPeakCharge'][(info[j]['minPeak']>5)&(info[j]['minPeakCharge']<1000)],info[j][(info[j]['minPeak']>5)&(info[j]['minPeakCharge']<1000)]['end5mV']-info[j][(info[j]['minPeak']>5)&(info[j]['minPeakCharge']<1000)]['begin5mV'], bins=[200,30], cmap=cmap)
    fig.colorbar(h[3], ax=ax)
    ax.set_xlabel('charge/mVns')
    ax.set_ylabel('tot/ns')
    pdf.savefig(fig)
    # plt.savefig('{}/{}tot-chargeCut.png'.format(args.opt,args.channel[j]))
    
    index = np.where(((info[j]['minPeakPos']>300)&(info[j]['minPeakPos']<350))&(info[j]['minPeakCharge']>45)&(info[j]['minPeakCharge']<55))[0]
    fig, ax = plt.subplots()
    ax.set_title('minPeak-nearMax charge[45,55],pos[300,350] ch{}, entries:{}'.format(2,index.shape[0]))
    h=ax.hist2d(info[j]['minPeak'][index], info[j]['nearPosMax'][index],range=[[0,20],[0,15]], bins=[20, 15], cmap=cmap)
    ax.set_xlabel('peakHeight/mV')
    ax.set_ylabel('nearMax/mV')
    fig.colorbar(h[3], ax=ax)
    pdf.savefig(fig)
    # plt.savefig('{}/{}peak-nearmaxPos300-350Charge45-55.png'.format(args.opt,args.channel[j]))
pdf.close()